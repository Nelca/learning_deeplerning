import customconsole as cc

class CustomConsole(cc.CustomConsole):
    def check_input(self, ri):
        replaced_ri = ri.replace(" ", "")
        if replaced_ri == "x,t=get_data()":
            print("")
            print("Nice.")
            print("this variable data is")
            print("x:is test image data")
            print("t:is test label data")
            print("")
            print("So checking the mnist datas.")
            print("")
            print("x.shape")
            print("")
            print("and")
            print("")
            print("t.shape")
            print("")
        elif replaced_ri == "t.shape":
            print("")
            self.runsource(ri)
            ri = ""
            print("")
            print("That's good!!!!")
            print("Next is predict function.")
            print("Let's complete the function in the fill-in format.")
            print("")
            print("Predict function is as follow.")
            print("")
            print("def predict(network, x):")
            print("    W1, W2, W3 = network['W1'], network['W2'], network['W3']")
            print("    b1, b2, b3 = network['b1'], network['b2'], network['b3']")
            print("")
            print("    a1 = *Question-1*")
            print("    z1 = sigmoid(a1)")
            print("    a2 = np.dot(z1, W2) + b2")
            print("    z2 = *Question-2*")
            print("    a3 = np.dot(z2, W3) + b3")
            print("    y = *Question-3*")
            print("")
            print("    return y")
            print("")
            print("")
            print("Please input your answer as below.")
            print("ans = np.array(['Answer-1', 'Answer-2', 'Answer-3'])")
            print("")
            print("And check the answer as below.")
            print("checkPredictFillin(ans)")
            print("")
            print("")
            print("This function can be redisplayed as follow.->")
            print("hint_predict")
            print("")
            print("Or you nedd answer, type as follow->")
            print("ans_predict")
            print("")
        elif replaced_ri == "hint_predict":
            print("Predict function as follow.")
            print("")
            print("def predict(network, x):")
            print("    W1, W2, W3 = network['W1'], network['W2'], network['W3']")
            print("    b1, b2, b3 = network['b1'], network['b2'], network['b3']")
            print("")
            print("    a1_dot = np.dot(x, W1)")
            print("    a1 = *Question-1*")
            print("    z1 = sigmoid(a1)")
            print("    a2 = np.dot(z1, W2) + b2")
            print("    z2 = *Question-2*")
            print("    a3 = np.dot(z2, W3) + b3")
            print("    y = *Question-3*")
            print("")
            print("    return y")
            print("")
            print("")
            print("Please input your answer as below.")
            print("ans = np.array(['Answer-1', 'Answer-2', 'Answer-3'])")
            print("")
            print("And check the answer as below.")
            print("checkPredictFillin(ans)")
            print("")
        elif replaced_ri == "ans_predict":
            print("")
            print("The answer is...")
            print("")
            print("def predict(network, x):")
            print("    W1, W2, W3 = network['W1'], network['W2'], network['W3']")
            print("    b1, b2, b3 = network['b1'], network['b2'], network['b3']")
            print("")
            print("    a1_dot = np.dot(x, W1)")
            print("    a1 = a1_dot + b1")
            print("    z1 = sigmoid(a1)")
            print("    a2 = np.dot(z1, W2) + b2")
            print("    z2 = sigmoid(a2)")
            print("    a3 = np.dot(z2, W3) + b3")
            print("    y = softmax(a3)")
            print("")
            print("    return y")
            print("")
            print("Is that Okay?")
            print("Let's input your answer as below.")
            print("ans = np.array(['a1_dot + b1', 'sigmoid(a2)', 'softmax(a3)'])")
            print("")
            print("And check the answer as below.")
            print("checkPredictFillin(ans)")
            print("")
        elif replaced_ri == "network=init_network()":
            print("That's good!")
            print("Next is calculate recognition accuracy,")
            print("and check the accuracy answre as follow.")
            print("")
            print("checkAccuracy(accuracy_ans)")
            print("")
            print("If you want a hint type this->")
            print("hint_accuracy")
            print("")
        elif replaced_ri == "hint_accuracy":
            print("Get accuracy example as follow.")
            print("for i in range(len(x)):")
            print("    y = predict(network, x[i])")
            print("    p= np.argmax(y)")
            print("    if p == t[i]:")
            print("        accuracy_cnt += 1")
            print("    accuracy = float(accuracy_cnt) / len(x))")
            print("")
        return ri

ch03_2_console = CustomConsole(question_file= "./ch03_2_functions.py")
ch03_2_console.interact("### welcome chapter 3-2 !!! ###")

